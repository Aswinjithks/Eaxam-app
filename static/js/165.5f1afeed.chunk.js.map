{"version":3,"file":"static/js/165.5f1afeed.chunk.js","mappings":"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","sources":["utils/fakeAPI.ts","data/questions.ts","components/ExamTimer.tsx","components/QuestionTimer.tsx","components/QuestionOptions.tsx","components/Question.tsx","components/Results.tsx","pages/ExamPage.tsx"],"sourcesContent":["import axios from 'axios';\r\nimport MockAdapter from 'axios-mock-adapter';\r\nimport { EXAM_DATA } from '@data/questions';\r\n\r\nconst mock = new MockAdapter(axios);\r\n\r\nmock.onGet('/exam').reply(200, EXAM_DATA);\r\n\r\nexport default axios;\r\n","export const EXAM_DATA = {\r\n    examTime: 10,\r\n    questionTime: 0.5,\r\n    questions: [\r\n        {\r\n            id: 1,\r\n            type: 'optional',\r\n            question: 'Which of the following are programming languages?',\r\n            options: ['Python', 'HTML', 'CSS', 'JavaScript'],\r\n            correctAnswers: ['Python', 'JavaScript'],\r\n        },\r\n        {\r\n            id: 2,\r\n            type: 'multi-choice',\r\n            question: 'Which planet is known as the Red Planet?',\r\n            options: ['Earth', 'Mars', 'Jupiter', 'Saturn'],\r\n            answer: 'Mars',\r\n        },\r\n        {\r\n            id: 3,\r\n            type: 'multi-choice',\r\n            question: 'Who wrote \"To Kill a Mockingbird\"?',\r\n            options: ['Harper Lee', 'Mark Twain', 'J.K. Rowling', 'Ernest Hemingway'],\r\n            answer: 'Harper Lee',\r\n        },\r\n        {\r\n            id: 4,\r\n            type: 'optional',\r\n            question: 'Select the primary colors.',\r\n            options: ['Red', 'Green', 'Blue', 'Yellow'],\r\n            correctAnswers: ['Red', 'Blue', 'Yellow'],\r\n        },\r\n        {\r\n            id: 5,\r\n            type: 'multi-choice',\r\n            question: 'Who is known as the father of computers?',\r\n            options: ['Charles Babbage', 'Alan Turing', 'Bill Gates', 'Steve Jobs'],\r\n            answer: 'Charles Babbage',\r\n        },\r\n        {\r\n            id: 6,\r\n            type: 'multi-choice',\r\n            question: 'What is the largest ocean on Earth?',\r\n            options: ['Atlantic Ocean', 'Indian Ocean', 'Arctic Ocean', 'Pacific Ocean'],\r\n            answer: 'Pacific Ocean',\r\n        },\r\n        {\r\n            id: 7,\r\n            type: 'optional',\r\n            question: 'Which of the following are mammals?',\r\n            options: ['Whale', 'Shark', 'Dolphin', 'Octopus'],\r\n            correctAnswers: ['Whale', 'Dolphin'],\r\n        },\r\n        {\r\n            id: 8,\r\n            type: 'multi-choice',\r\n            question: 'What is the boiling point of water?',\r\n            options: ['90°C', '100°C', '110°C', '120°C'],\r\n            answer: '100°C',\r\n        },\r\n        {\r\n            id: 9,\r\n            type: 'multi-choice',\r\n            question: 'Who painted the Mona Lisa?',\r\n            options: ['Vincent van Gogh', 'Pablo Picasso', 'Leonardo da Vinci', 'Claude Monet'],\r\n            answer: 'Leonardo da Vinci',\r\n        },\r\n        {\r\n            id: 10,\r\n            type: 'multi-choice',\r\n            question: 'What is the capital of Japan?',\r\n            options: ['Seoul', 'Tokyo', 'Beijing', 'Bangkok'],\r\n            answer: 'Tokyo',\r\n        },\r\n        {\r\n            id: 11,\r\n            type: 'multi-choice',\r\n            question: 'What is the hardest natural substance on Earth?',\r\n            options: ['Gold', 'Iron', 'Diamond', 'Platinum'],\r\n            answer: 'Diamond',\r\n        },\r\n        {\r\n            id: 12,\r\n            type: 'optional',\r\n            question: 'Which countries are in Europe?',\r\n            options: ['France', 'China', 'Brazil', 'Germany'],\r\n            correctAnswers: ['France', 'Germany'],\r\n        },\r\n        {\r\n            id: 13,\r\n            type: 'multi-choice',\r\n            question: 'Who discovered penicillin?',\r\n            options: ['Marie Curie', 'Isaac Newton', 'Alexander Fleming', 'Albert Einstein'],\r\n            answer: 'Alexander Fleming',\r\n        },\r\n        {\r\n            id: 14,\r\n            type: 'optional',\r\n            question: 'Which of the following are operating systems?',\r\n            options: ['Windows', 'Linux', 'MacOS', 'Photoshop'],\r\n            correctAnswers: ['Windows', 'Linux', 'MacOS'],\r\n        },\r\n        {\r\n            id: 15,\r\n            type: 'multi-choice',\r\n            question: 'What is the tallest mountain in the world?',\r\n            options: ['K2', 'Kangchenjunga', 'Lhotse', 'Everest'],\r\n            answer: 'Everest',\r\n        },\r\n        {\r\n            id: 16,\r\n            type: 'optional',\r\n            question: 'Which of the following are web browsers?',\r\n            options: ['Chrome', 'Firefox', 'Safari', 'Windows'],\r\n            correctAnswers: ['Chrome', 'Firefox', 'Safari'],\r\n        },\r\n        {\r\n            id: 17,\r\n            type: 'multi-choice',\r\n            question: 'What is the capital of France?',\r\n            options: ['Paris', 'London', 'Berlin', 'Madrid'],\r\n            answer: 'Paris',\r\n        },\r\n        {\r\n            id: 18,\r\n            type: 'multi-choice',\r\n            question: 'Who is the author of \"1984\"?',\r\n            options: ['George Orwell', 'Aldous Huxley', 'Ray Bradbury', 'J.R.R. Tolkien'],\r\n            answer: 'George Orwell',\r\n        },\r\n        {\r\n            id: 19,\r\n            type: 'multi-choice',\r\n            question: 'What is the chemical symbol for water?',\r\n            options: ['O2', 'H2O', 'CO2', 'NaCl'],\r\n            answer: 'H2O',\r\n        },\r\n        {\r\n            id: 20,\r\n            type: 'multi-choice',\r\n            question: 'Who developed the theory of relativity?',\r\n            options: ['Isaac Newton', 'Albert Einstein', 'Galileo Galilei', 'Niels Bohr'],\r\n            answer: 'Albert Einstein',\r\n        }\r\n    ],\r\n    mode: 'normal',\r\n};\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport styled from 'styled-components';\r\n\r\nconst TimerWrapper = styled.div`\r\n  font-size: 20px;\r\n  @media (max-width: 768px) {\r\n    background-color: white;\r\n    border-radius: 10px;\r\n    background: rgba(255, 255, 255, 0.9);\r\n  }\r\n`;\r\n\r\ninterface ExamTimerProps {\r\n  duration: number;\r\n  setShowResults: (showResults: boolean) => void;\r\n}\r\n\r\nconst ExamTimer: React.FC<ExamTimerProps> = ({ duration, setShowResults }) => {\r\n  const [timeLeft, setTimeLeft] = useState(duration * 60);\r\n\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      setTimeLeft((prev) => {\r\n        if (prev > 0) {\r\n          return prev - 1;\r\n        } else {\r\n          clearInterval(timer);\r\n          setShowResults(true);\r\n          toast.error('Time is up!');\r\n          return 0;\r\n        }\r\n      });\r\n    }, 1000);\r\n\r\n    return () => clearInterval(timer);\r\n  }, [setShowResults]);\r\n\r\n  const formatTime = (seconds: number) => {\r\n    const min = Math.floor(seconds / 60);\r\n    const sec = seconds % 60;\r\n    return `${min}:${sec < 10 ? '0' : ''}${sec}`;\r\n  };\r\n\r\n  return <TimerWrapper>Time Left: {formatTime(timeLeft)}</TimerWrapper>;\r\n};\r\n\r\nexport default ExamTimer;\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst TimerWrapper = styled.div`\r\n  font-size: 20px;\r\n`;\r\n\r\ninterface QuestionTimerProps {\r\n    setTimeLeft: React.Dispatch<React.SetStateAction<number>>;\r\n    timeLeft: number;\r\n    setCurrentQuestionIndex: React.Dispatch<React.SetStateAction<number>>;\r\n}\r\n\r\nconst QuestionTimer: React.FC<QuestionTimerProps> = ({ setTimeLeft, timeLeft, setCurrentQuestionIndex }) => {\r\n\r\n    useEffect(() => {\r\n        const timer = setInterval(() => {\r\n            setTimeLeft((prev: number) => {\r\n                if (prev > 0) return prev - 1;\r\n                setCurrentQuestionIndex((prev: number) => prev + 1);\r\n                return 0;\r\n            });\r\n        }, 1000);\r\n\r\n        return () => clearInterval(timer);\r\n    }, [setCurrentQuestionIndex]);\r\n\r\n    const formatTime = (seconds: number) => {\r\n        const min = Math.floor(seconds / 60);\r\n        const sec = seconds % 60;\r\n        return `${min}:${sec < 10 ? '0' : ''}${sec}`;\r\n    };\r\n\r\n    return <TimerWrapper>Question Time Left: {formatTime(timeLeft)}</TimerWrapper>;\r\n};\r\n\r\nexport default QuestionTimer;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst OptionsWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 10px;\r\n  margin-top: 20px;\r\n\r\n  @media (max-width: 600px) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n`;\r\n\r\nconst OptionLabel = styled.label`\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 10px;\r\n  background: #f9f9f9;\r\n  border: 1px solid #ddd;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  transition: background 0.3s;\r\n\r\n  &:hover {\r\n    background: #eee;\r\n  }\r\n`;\r\n\r\nconst Input = styled.input`\r\n  margin-right: 10px;\r\n`;\r\n\r\ninterface QuestionOptionsProps {\r\n  type: string;\r\n  options: string[];\r\n  selectedAnswer: string | string[];\r\n  onAnswerChange: (answer: string | string[]) => void;\r\n}\r\n\r\nconst QuestionOptions: React.FC<QuestionOptionsProps> = ({ type, options, selectedAnswer, onAnswerChange }) => {\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = e.target.value;\r\n    if (type === 'multi-choice') {\r\n      onAnswerChange(value);\r\n    } else {\r\n      let newSelectedAnswers: string[];\r\n      if (Array.isArray(selectedAnswer)) {\r\n        if (selectedAnswer.includes(value)) {\r\n          newSelectedAnswers = selectedAnswer.filter((answer) => answer !== value);\r\n        } else {\r\n          newSelectedAnswers = [...selectedAnswer, value];\r\n        }\r\n      } else {\r\n        newSelectedAnswers = [value];\r\n      }\r\n      onAnswerChange(newSelectedAnswers);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <OptionsWrapper>\r\n      {options.map((option, index) => (\r\n        <OptionLabel key={index}>\r\n          <Input\r\n            type={type === 'multi-choice' ? 'radio' : 'checkbox'}\r\n            name=\"options\"\r\n            value={option}\r\n            checked={\r\n              type === 'multi-choice'\r\n                ? selectedAnswer === option\r\n                : Array.isArray(selectedAnswer) && selectedAnswer.includes(option)\r\n            }\r\n            onChange={handleChange}\r\n          />\r\n          {option}\r\n        </OptionLabel>\r\n      ))}\r\n    </OptionsWrapper>\r\n  );\r\n};\r\n\r\nexport default QuestionOptions;\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport QuestionTimer from './QuestionTimer';\r\nimport QuestionOptions from './QuestionOptions';\r\n\r\nconst QuestionWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 20px;\r\n  background: rgba(255, 255, 255, 0.9);\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\r\n  max-width: 600px;\r\n  width: 90%;\r\n  margin: 20px auto;\r\n  @media (max-width: 768px) {\r\n    padding: 15px;\r\n  }\r\n`;\r\n\r\nconst QuestionText = styled.h2`\r\n  font-size: 1.5rem;\r\n  margin: 20px 0;\r\n  text-align: center;\r\n  @media (max-width: 768px) {\r\n    font-size: 1.2rem;\r\n  }\r\n`;\r\n\r\nconst SubmitButton = styled.button`\r\n  padding: 10px 20px;\r\n  font-size: 16px;\r\n  color: #fff;\r\n  background-color: #0072ff;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease;\r\n  margin-top: 20px;\r\n\r\n  &:hover {\r\n    background-color: #005bb5;\r\n  }\r\n`;\r\n\r\nconst Error = styled.p`\r\n  color: red;\r\n  margin-top: 10px;\r\n  height: 1em;\r\n  font-size: 0.9rem;\r\n`;\r\n\r\ninterface QuestionProps {\r\n  question: {\r\n    id: number;\r\n    type: string;\r\n    question: string;\r\n    options: string[];\r\n  };\r\n  questionTime: number;\r\n  onAnswer: (questionId: number, answer: string | string[]) => void;\r\n  setCurrentQuestionIndex: React.Dispatch<React.SetStateAction<number>>;\r\n}\r\n\r\nconst Question: React.FC<QuestionProps> = ({ question, questionTime, onAnswer, setCurrentQuestionIndex }) => {\r\n  const [selectedAnswer, setSelectedAnswer] = useState<string | string[]>('');\r\n  const [timeLeft, setTimeLeft] = useState(questionTime * 60);\r\n  const [error, setError] = useState<null | string>(null);\r\n\r\n  const handleAnswerChange = (answer: string | string[]) => {\r\n    setSelectedAnswer(answer);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    setError(null);\r\n    if (question.type === 'multi-choice' && !selectedAnswer) {\r\n      return setError('Please select an answer');\r\n    }\r\n    if (question.type !== 'multi-choice' && (!Array.isArray(selectedAnswer) || selectedAnswer.length === 1)) {\r\n      return setError('Please select 2 or more answers');\r\n    }\r\n    onAnswer(question.id, selectedAnswer);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setSelectedAnswer('');\r\n    setTimeLeft(questionTime * 60);\r\n  }, [question]);\r\n\r\n  return (\r\n    <QuestionWrapper>\r\n      <h5>Question {question.id}</h5>\r\n      <QuestionTimer setTimeLeft={setTimeLeft} timeLeft={timeLeft} setCurrentQuestionIndex={setCurrentQuestionIndex} />\r\n      <QuestionText>{question.question}</QuestionText>\r\n      <QuestionOptions\r\n        type={question.type}\r\n        options={question.options}\r\n        selectedAnswer={selectedAnswer}\r\n        onAnswerChange={handleAnswerChange}\r\n      />\r\n      <SubmitButton onClick={handleSubmit}>Submit</SubmitButton>\r\n      <Error>{error}</Error>\r\n    </QuestionWrapper>\r\n  );\r\n};\r\n\r\nexport default Question;\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Result } from '../types';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n\r\n\r\ninterface ResultProps {\r\n    answers: Result[];\r\n    numberOfQuestions: number;\r\n\r\n}\r\n\r\n\r\n\r\nconst ResultsWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 20px;\r\n  background: rgba(255, 255, 255, 0.9);\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\r\n  max-width: 600px;\r\n  width: 90%;\r\n  margin: 20px auto;\r\n`;\r\n\r\nconst ResultItem = styled.div`\r\n  margin: 10px 0;\r\n  padding: 10px;\r\n  background: #f9f9f9;\r\n  border: 1px solid #ddd;\r\n  border-radius: 5px;\r\n  width: 100%;\r\n`;\r\n\r\nconst CorrectAnswer = styled.span`\r\n  color: green;\r\n`;\r\n\r\nconst IncorrectAnswer = styled.span`\r\n  color: red;\r\n`;\r\n\r\nconst StartButton = styled.button`\r\n  padding: 10px 20px;\r\n  font-size: 14px;\r\n  color: #fff;\r\n  background-color: darkblue;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease;\r\n\r\n  &:hover {\r\n    background-color: rgba(0, 0, 0, 0.5);\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n  }\r\n`;\r\n\r\nconst Results: React.FC<ResultProps> = ({ answers, numberOfQuestions }) => {\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const correctAnswersCount = answers.filter((answer) => {\r\n        if (Array.isArray(answer.userAnswer)) {\r\n            return answer.userAnswer.sort().toString() === (answer.correctAnswer as string[]).sort().toString();\r\n        }\r\n        return answer.userAnswer === answer.correctAnswer;\r\n    }).length;\r\n\r\n    const compareAnswers = (userAnswer: string | string[], correctAnswer: string | string[]) => {\r\n        if (Array.isArray(userAnswer) && Array.isArray(correctAnswer)) {\r\n            return userAnswer.sort().toString() === correctAnswer.sort().toString();\r\n        }\r\n        return userAnswer === correctAnswer;\r\n    };\r\n\r\n\r\n    return (\r\n        <ResultsWrapper>\r\n            <h2>Results</h2>\r\n            <p>You have answered {answers.length} out of {numberOfQuestions} questions.</p>\r\n            <p>You'r score is {correctAnswersCount}</p>\r\n\r\n            {answers.map((answer, index) => (\r\n                <ResultItem key={index}>\r\n                    <p>Question {answer.questionId}</p>\r\n                    <p>\r\n                        Your Answer: {Array.isArray(answer.userAnswer) ? answer.userAnswer.join(', ') : answer.userAnswer} <br />\r\n                        Correct Answer: {Array.isArray(answer.correctAnswer) ? (answer.correctAnswer as string[]).join(', ') : answer.correctAnswer}\r\n                    </p>\r\n                    <p>\r\n                        {compareAnswers(answer.userAnswer, answer.correctAnswer)\r\n                            ? <CorrectAnswer>Correct</CorrectAnswer>\r\n                            : <IncorrectAnswer>Incorrect</IncorrectAnswer>}\r\n                    </p>\r\n                </ResultItem>\r\n            ))}\r\n            <StartButton onClick={() => navigate('/')}>Back to Home</StartButton>\r\n        </ResultsWrapper>\r\n    );\r\n};\r\n\r\nexport default Results;\r\n\r\n\r\n\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport axios from '@utils/fakeAPI';\r\nimport ExamTimer from '@components/ExamTimer';\r\nimport Question from '@components/Question';\r\nimport Results from '@components/Results';\r\nimport { ExamData, Result } from '../types';\r\nimport { toast } from 'react-toastify';\r\nimport styled from 'styled-components';\r\n\r\nconst ExamWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 100vh;\r\n  padding: 20px;\r\n  background: linear-gradient(135deg, #00c6ff, #0072ff);\r\n  text-align: center;\r\n`;\r\n\r\nconst ContentWrapper = styled.div`\r\n  width: 100%;\r\n  max-width: 800px;\r\n  height: 100%;\r\n  background: rgba(255, 255, 255, 0.9);\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\r\n  padding: 20px;\r\n  margin: 10px;\r\n  @media (max-width: 600px) {\r\n    background: none;\r\n  }\r\n`;\r\n\r\nconst LoadingWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n  background: linear-gradient(135deg, #00c6ff, #0072ff);\r\n  font-size: 1.5rem;\r\n  color: #fff;\r\n`;\r\n\r\nconst ExamPage: React.FC = () => {\r\n    const [examData, setExamData] = useState<ExamData | null>(null);\r\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n    const [answers, setAnswers] = useState<Result[]>([]);\r\n    const [showResults, setShowResults] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchExamData = async () => {\r\n            const response = await axios.get('/exam');\r\n            setExamData(response.data);\r\n        };\r\n        fetchExamData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const handlePopState = (event: PopStateEvent) => {\r\n            window.history.pushState(null, document.title, window.location.href);\r\n            toast.warning('You cannot go back during the exam');\r\n        };\r\n\r\n        window.history.pushState(null, document.title, window.location.href);\r\n        window.addEventListener('popstate', handlePopState);\r\n\r\n        return () => {\r\n            window.removeEventListener('popstate', handlePopState);\r\n        };\r\n    }, []);\r\n\r\n\r\n    const handleAnswer = (questionId: number, answer: string | string[]) => {\r\n        const question = examData?.questions.find((q) => q.id === questionId);\r\n        if (examData && question) {\r\n            const correctAnswer = question.type === 'multi-choice' ? question.answer : question.correctAnswers;\r\n            setAnswers((prev) => [\r\n                ...prev,\r\n                {\r\n                    questionId,\r\n                    userAnswer: answer,\r\n                    correctAnswer: correctAnswer || '',\r\n                },\r\n            ]);\r\n\r\n            if (currentQuestionIndex < examData.questions.length - 1) {\r\n                setCurrentQuestionIndex((prev) => prev + 1);\r\n            } else {\r\n                setShowResults(true);\r\n            }\r\n        }\r\n    };\r\n\r\n    if (!examData) {\r\n        return <LoadingWrapper>Loading...</LoadingWrapper>;\r\n    }\r\n\r\n    return (\r\n        <ExamWrapper>\r\n            <ContentWrapper>\r\n                {!showResults && <ExamTimer duration={examData.examTime} setShowResults={setShowResults} />}\r\n                {showResults ? (\r\n                    <Results answers={answers} numberOfQuestions={examData.questions.length} />\r\n                ) : (\r\n                    <Question\r\n                        question={examData.questions[currentQuestionIndex]}\r\n                        questionTime={examData.questionTime}\r\n                        onAnswer={handleAnswer}\r\n                        setCurrentQuestionIndex={setCurrentQuestionIndex}\r\n                    />\r\n                )}\r\n            </ContentWrapper>\r\n        </ExamWrapper>\r\n    );\r\n};\r\n\r\nexport default ExamPage;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["MockAdapter","axios","onGet","reply","examTime","questionTime","questions","id","type","question","options","correctAnswers","answer","mode","TimerWrapper","styled","div","_templateObject","_taggedTemplateLiteral","_ref","duration","setShowResults","timeLeft","setTimeLeft","useState","useEffect","timer","setInterval","prev","clearInterval","toast","error","_jsxs","children","seconds","min","Math","floor","sec","concat","formatTime","setCurrentQuestionIndex","OptionsWrapper","OptionLabel","label","_templateObject2","Input","input","_templateObject3","selectedAnswer","onAnswerChange","handleChange","e","value","target","newSelectedAnswers","Array","isArray","includes","filter","_jsx","map","option","index","name","checked","onChange","QuestionWrapper","QuestionText","h2","SubmitButton","button","Error","p","_templateObject4","onAnswer","setSelectedAnswer","setError","QuestionTimer","QuestionOptions","onClick","handleSubmit","length","ResultsWrapper","ResultItem","CorrectAnswer","span","IncorrectAnswer","StartButton","_templateObject5","answers","numberOfQuestions","navigate","useNavigate","correctAnswersCount","userAnswer","sort","toString","correctAnswer","questionId","join","compareAnswers","ExamWrapper","ContentWrapper","LoadingWrapper","ExamPage","examData","setExamData","currentQuestionIndex","setAnswers","showResults","async","response","get","data","fetchExamData","handlePopState","event","window","history","pushState","document","title","location","href","warning","addEventListener","removeEventListener","ExamTimer","Results","Question","handleAnswer","find","q"],"sourceRoot":""}